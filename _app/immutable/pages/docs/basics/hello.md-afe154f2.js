import{S as Sa,i as Aa,s as qa,e as o,t as l,k as r,c as i,a as u,h as p,d as t,m as c,b as h,U as Da,g as n,R as s,n as Nt}from"../../../chunks/index-cd4ba230.js";function Na(va){let k,Be,ue,j,Je,re,G,Ke,ce,T,ba=`<code class="language-python"><span class="token keyword">import</span> tukaan

app <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>App<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"My first app"</span><span class="token punctuation">)</span>

window <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>MainWindow<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>

greeting_label <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>
greeting_label<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,he,U,Ve,we,S,Xe,de,w,Ze,te,$e,et,ae,tt,at,A,nt,st,fe,E,ot,ke,q,it,ye,P,_a='<code class="language-python">window <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>MainWindow<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span></code>',me,y,lt,ne,pt,ut,ve,D,rt,be,m,N,zt,ct,g,ht,wt,dt,_e,z,ft,Te,H,kt,Ee,F,yt,Pe,f,mt,se,vt,bt,Q,_t,Tt,ge,W,Ta=`<code class="language-python">greeting_label <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>
greeting_label<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,He,x,Et,We,I,Ea='<code class="language-python">app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code>',xe,d,Pt,oe,gt,Ht,ie,Wt,xt,le,It,Mt,Ie,Y,Lt,Me,B,Rt,Le,M,Pa=`<code class="language-python"><span class="token keyword">while</span> main_window_is_open<span class="token punctuation">:</span>
    wait_until_event_queue_is_not_empty<span class="token punctuation">(</span><span class="token punctuation">)</span>
    event <span class="token operator">=</span> event_queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span>handle<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Re,J,Ct,Ce,L,ga=`<code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    event<span class="token punctuation">,</span> values <span class="token operator">=</span> window<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> event <span class="token operator">==</span> psg<span class="token punctuation">.</span>WIN_CLOSED<span class="token punctuation">:</span>
        <span class="token keyword">break</span></code>`,Oe,K,Ot,je,R,Ha=`<code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>
            <span class="token keyword">break</span></code>`,Ge,V,jt,Ue,C,Wa=`<code class="language-python">window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,Se,v,Gt,pe,Ut,St,Ae,X,At,qe,O,xa=`<code class="language-python"><span class="token keyword">import</span> tukaan

app <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token punctuation">)</span>
window <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Your code here</span>

app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,De,Z,qt,Ne,$,Dt;return{c(){k=o("h1"),Be=l("Hello World!"),ue=r(),j=o("p"),Je=l("Now let\u2019s write our first app with Tukaan!"),re=r(),G=o("p"),Ke=l(`The following application will simply open a window with the text \u201CHello world!\u201D in it.
Give it a try, and then let\u2019s go through it line by line.`),ce=r(),T=o("pre"),he=r(),U=o("p"),Ve=l("The first line is obvious. This time we only need the basic namespace, which includes most of the widgets. Tukaan also has some submodules that help you work with fonts, colors, create various system dialogs and apply themes to the UI."),we=r(),S=o("p"),Xe=l("On the second line we create the application. This itself doesn\u2019t create the main window, but sets up some information about the app, and initializes the embedded Tcl interpreter."),de=r(),w=o("p"),Ze=l("Tukaan works by using an embedded Tcl/Tk interpreter, and translating the Python function calls to Tcl commands. Tkinter works similarly, but it doesn\u2019t always translate the objects returned from Tcl to a Python object, so sometimes it gives back a string instead of a list or a float, which can be really frustrating. Tukaan does this conversion "),te=o("strong"),$e=l("way"),et=l(" better, so a Pillow image or a "),ae=o("code"),tt=l("pathlib.Path"),at=l(" object can be easily represented in Tcl, and then converted back to a Python object. If you want to learn more about this topic, "),A=o("a"),nt=l("read this"),st=l("."),fe=r(),E=o("h2"),ot=l("Creating a window"),ke=r(),q=o("p"),it=l("Next, we create the main window of the application."),ye=r(),P=o("pre"),me=r(),y=o("p"),lt=l("This will create an empty window with the title \u201CHello world!\u201C. We assign the window to a "),ne=o("code"),pt=l("window"),ut=l(" variable so we can do things with it later and use it as a parent for other widgets."),ve=r(),D=o("p"),rt=l("The window decoration is determined by the window manager, so it will look differently depending on your system."),be=r(),m=o("figure"),N=o("img"),ct=r(),g=o("figcaption"),ht=l("Empty tukaan windows on Linux Mint, Windows 11 and macOS."),wt=o("br"),dt=l("Throughout the rest of this tutorial, you\u2019ll usually see screenshots taken on Linux Mint."),_e=r(),z=o("p"),ft=l("The main window is required to run the application. When it\u2019s closed, the whole GUI will be destroyed."),Te=r(),H=o("h2"),kt=l("The label"),Ee=r(),F=o("p"),yt=l("Creating a label is quite straightforward. We specify its parent in which it will be placed, and give it some text to display."),Pe=r(),f=o("p"),mt=l("After that we display it on the screen, by calling the "),se=o("code"),vt=l("grid"),bt=l(" method on the created object. To learn more about widget placement in the grid system, see "),Q=o("a"),_t=l("this page"),Tt=l(","),ge=r(),W=o("pre"),He=r(),x=o("h2"),Et=l("The event loop"),We=r(),I=o("pre"),xe=r(),d=o("p"),Pt=l("The final task is to actually start the application with the "),oe=o("code"),gt=l("run"),Ht=l(" method of "),ie=o("code"),Wt=l("tukaan.App"),xt=l(". Without this, the window will pop up on the screen, but then disappear imediately. To understand why, we need to learn about the "),le=o("em"),It=l("event loop"),Mt=l("."),Ie=r(),Y=o("p"),Lt=l("GUI frameworks work by running a infinite loop, and listening for events inside it, such as a mouse action or keypress and process them. For example, when you click a button, it calculates which widget is under the mouse cursor (i.e. which widget was clicked), gives you visual feedback so the button will look like it\u2019s pressed, and runs the callback associated with it."),Me=r(),B=o("p"),Rt=l("This event loop looks kinda like this in pseudocode:"),Le=r(),M=o("pre"),Re=r(),J=o("p"),Ct=l("With some frameworks, you have to create this event loop yourself, like in PySimpleGUI"),Ce=r(),L=o("pre"),Oe=r(),K=o("p"),Ot=l("or in Pygame"),je=r(),R=o("pre"),Ge=r(),V=o("p"),jt=l("but in others, you can use a function to start the built-in event loop, like in PyQt:"),Ue=r(),C=o("pre"),Se=r(),v=o("p"),Gt=l("In Tukaan you can start the event loop by calling the "),pe=o("code"),Ut=l("run"),St=l(" method on the app object. Remember that this method should be always at the end of your code, since it runs an infinite loop, and thus won\u2019t return until the main window is closed."),Ae=r(),X=o("p"),At=l("If you don\u2019t use this method, the window will only appear for a moment and then close, since there is no loop to keep the program alive."),qe=r(),O=o("pre"),De=r(),Z=o("p"),qt=l("See? With four lines of code we have a working window, that responds to maximizing and closing without having to worry about processing and dispatching events or redrawing the screen as its size changes."),Ne=r(),$=o("p"),Dt=l("You might think that you can\u2019t access these events from within the program, because they are handled internally, but fortunately this is not the case. Tukaan (i.e. Tk) sends event to widgets, to which you can bind functions and also get some useful information about the event. In fact, you can even generate your own events that the widgets can respond to."),this.h()},l(e){k=i(e,"H1",{id:!0});var a=u(k);Be=p(a,"Hello World!"),a.forEach(t),ue=c(e),j=i(e,"P",{});var Ft=u(j);Je=p(Ft,"Now let\u2019s write our first app with Tukaan!"),Ft.forEach(t),re=c(e),G=i(e,"P",{});var Qt=u(G);Ke=p(Qt,`The following application will simply open a window with the text \u201CHello world!\u201D in it.
Give it a try, and then let\u2019s go through it line by line.`),Qt.forEach(t),ce=c(e),T=i(e,"PRE",{class:!0});var Ia=u(T);Ia.forEach(t),he=c(e),U=i(e,"P",{});var Yt=u(U);Ve=p(Yt,"The first line is obvious. This time we only need the basic namespace, which includes most of the widgets. Tukaan also has some submodules that help you work with fonts, colors, create various system dialogs and apply themes to the UI."),Yt.forEach(t),we=c(e),S=i(e,"P",{});var Bt=u(S);Xe=p(Bt,"On the second line we create the application. This itself doesn\u2019t create the main window, but sets up some information about the app, and initializes the embedded Tcl interpreter."),Bt.forEach(t),de=c(e),w=i(e,"P",{});var b=u(w);Ze=p(b,"Tukaan works by using an embedded Tcl/Tk interpreter, and translating the Python function calls to Tcl commands. Tkinter works similarly, but it doesn\u2019t always translate the objects returned from Tcl to a Python object, so sometimes it gives back a string instead of a list or a float, which can be really frustrating. Tukaan does this conversion "),te=i(b,"STRONG",{});var Jt=u(te);$e=p(Jt,"way"),Jt.forEach(t),et=p(b," better, so a Pillow image or a "),ae=i(b,"CODE",{});var Kt=u(ae);tt=p(Kt,"pathlib.Path"),Kt.forEach(t),at=p(b," object can be easily represented in Tcl, and then converted back to a Python object. If you want to learn more about this topic, "),A=i(b,"A",{href:!0});var Vt=u(A);nt=p(Vt,"read this"),Vt.forEach(t),st=p(b,"."),b.forEach(t),fe=c(e),E=i(e,"H2",{id:!0});var Xt=u(E);ot=p(Xt,"Creating a window"),Xt.forEach(t),ke=c(e),q=i(e,"P",{});var Zt=u(q);it=p(Zt,"Next, we create the main window of the application."),Zt.forEach(t),ye=c(e),P=i(e,"PRE",{class:!0});var Ma=u(P);Ma.forEach(t),me=c(e),y=i(e,"P",{});var ze=u(y);lt=p(ze,"This will create an empty window with the title \u201CHello world!\u201C. We assign the window to a "),ne=i(ze,"CODE",{});var $t=u(ne);pt=p($t,"window"),$t.forEach(t),ut=p(ze," variable so we can do things with it later and use it as a parent for other widgets."),ze.forEach(t),ve=c(e),D=i(e,"P",{});var ea=u(D);rt=p(ea,"The window decoration is determined by the window manager, so it will look differently depending on your system."),ea.forEach(t),be=c(e),m=i(e,"FIGURE",{});var Fe=u(m);N=i(Fe,"IMG",{src:!0,alt:!0}),ct=c(Fe),g=i(Fe,"FIGCAPTION",{});var Qe=u(g);ht=p(Qe,"Empty tukaan windows on Linux Mint, Windows 11 and macOS."),wt=i(Qe,"BR",{}),dt=p(Qe,"Throughout the rest of this tutorial, you\u2019ll usually see screenshots taken on Linux Mint."),Qe.forEach(t),Fe.forEach(t),_e=c(e),z=i(e,"P",{});var ta=u(z);ft=p(ta,"The main window is required to run the application. When it\u2019s closed, the whole GUI will be destroyed."),ta.forEach(t),Te=c(e),H=i(e,"H2",{id:!0});var aa=u(H);kt=p(aa,"The label"),aa.forEach(t),Ee=c(e),F=i(e,"P",{});var na=u(F);yt=p(na,"Creating a label is quite straightforward. We specify its parent in which it will be placed, and give it some text to display."),na.forEach(t),Pe=c(e),f=i(e,"P",{});var ee=u(f);mt=p(ee,"After that we display it on the screen, by calling the "),se=i(ee,"CODE",{});var sa=u(se);vt=p(sa,"grid"),sa.forEach(t),bt=p(ee," method on the created object. To learn more about widget placement in the grid system, see "),Q=i(ee,"A",{href:!0});var oa=u(Q);_t=p(oa,"this page"),oa.forEach(t),Tt=p(ee,","),ee.forEach(t),ge=c(e),W=i(e,"PRE",{class:!0});var La=u(W);La.forEach(t),He=c(e),x=i(e,"H2",{id:!0});var ia=u(x);Et=p(ia,"The event loop"),ia.forEach(t),We=c(e),I=i(e,"PRE",{class:!0});var Ra=u(I);Ra.forEach(t),xe=c(e),d=i(e,"P",{});var _=u(d);Pt=p(_,"The final task is to actually start the application with the "),oe=i(_,"CODE",{});var la=u(oe);gt=p(la,"run"),la.forEach(t),Ht=p(_," method of "),ie=i(_,"CODE",{});var pa=u(ie);Wt=p(pa,"tukaan.App"),pa.forEach(t),xt=p(_,". Without this, the window will pop up on the screen, but then disappear imediately. To understand why, we need to learn about the "),le=i(_,"EM",{});var ua=u(le);It=p(ua,"event loop"),ua.forEach(t),Mt=p(_,"."),_.forEach(t),Ie=c(e),Y=i(e,"P",{});var ra=u(Y);Lt=p(ra,"GUI frameworks work by running a infinite loop, and listening for events inside it, such as a mouse action or keypress and process them. For example, when you click a button, it calculates which widget is under the mouse cursor (i.e. which widget was clicked), gives you visual feedback so the button will look like it\u2019s pressed, and runs the callback associated with it."),ra.forEach(t),Me=c(e),B=i(e,"P",{});var ca=u(B);Rt=p(ca,"This event loop looks kinda like this in pseudocode:"),ca.forEach(t),Le=c(e),M=i(e,"PRE",{class:!0});var Ca=u(M);Ca.forEach(t),Re=c(e),J=i(e,"P",{});var ha=u(J);Ct=p(ha,"With some frameworks, you have to create this event loop yourself, like in PySimpleGUI"),ha.forEach(t),Ce=c(e),L=i(e,"PRE",{class:!0});var Oa=u(L);Oa.forEach(t),Oe=c(e),K=i(e,"P",{});var wa=u(K);Ot=p(wa,"or in Pygame"),wa.forEach(t),je=c(e),R=i(e,"PRE",{class:!0});var ja=u(R);ja.forEach(t),Ge=c(e),V=i(e,"P",{});var da=u(V);jt=p(da,"but in others, you can use a function to start the built-in event loop, like in PyQt:"),da.forEach(t),Ue=c(e),C=i(e,"PRE",{class:!0});var Ga=u(C);Ga.forEach(t),Se=c(e),v=i(e,"P",{});var Ye=u(v);Gt=p(Ye,"In Tukaan you can start the event loop by calling the "),pe=i(Ye,"CODE",{});var fa=u(pe);Ut=p(fa,"run"),fa.forEach(t),St=p(Ye," method on the app object. Remember that this method should be always at the end of your code, since it runs an infinite loop, and thus won\u2019t return until the main window is closed."),Ye.forEach(t),Ae=c(e),X=i(e,"P",{});var ka=u(X);At=p(ka,"If you don\u2019t use this method, the window will only appear for a moment and then close, since there is no loop to keep the program alive."),ka.forEach(t),qe=c(e),O=i(e,"PRE",{class:!0});var Ua=u(O);Ua.forEach(t),De=c(e),Z=i(e,"P",{});var ya=u(Z);qt=p(ya,"See? With four lines of code we have a working window, that responds to maximizing and closing without having to worry about processing and dispatching events or redrawing the screen as its size changes."),ya.forEach(t),Ne=c(e),$=i(e,"P",{});var ma=u($);Dt=p(ma,"You might think that you can\u2019t access these events from within the program, because they are handled internally, but fortunately this is not the case. Tukaan (i.e. Tk) sends event to widgets, to which you can bind functions and also get some useful information about the event. In fact, you can even generate your own events that the widgets can respond to."),ma.forEach(t),this.h()},h(){h(k,"id","hello-world"),h(T,"class","language-python"),h(A,"href","../advanced/behind-the-scenes"),h(E,"id","creating-a-window"),h(P,"class","language-python"),Da(N.src,zt="/resources/docs/label.png")||h(N,"src",zt),h(N,"alt","Picture of blank Tukaan windows"),h(H,"id","the-label"),h(Q,"href","grid"),h(W,"class","language-python"),h(x,"id","the-event-loop"),h(I,"class","language-python"),h(M,"class","language-python"),h(L,"class","language-python"),h(R,"class","language-python"),h(C,"class","language-python"),h(O,"class","language-python")},m(e,a){n(e,k,a),s(k,Be),n(e,ue,a),n(e,j,a),s(j,Je),n(e,re,a),n(e,G,a),s(G,Ke),n(e,ce,a),n(e,T,a),T.innerHTML=ba,n(e,he,a),n(e,U,a),s(U,Ve),n(e,we,a),n(e,S,a),s(S,Xe),n(e,de,a),n(e,w,a),s(w,Ze),s(w,te),s(te,$e),s(w,et),s(w,ae),s(ae,tt),s(w,at),s(w,A),s(A,nt),s(w,st),n(e,fe,a),n(e,E,a),s(E,ot),n(e,ke,a),n(e,q,a),s(q,it),n(e,ye,a),n(e,P,a),P.innerHTML=_a,n(e,me,a),n(e,y,a),s(y,lt),s(y,ne),s(ne,pt),s(y,ut),n(e,ve,a),n(e,D,a),s(D,rt),n(e,be,a),n(e,m,a),s(m,N),s(m,ct),s(m,g),s(g,ht),s(g,wt),s(g,dt),n(e,_e,a),n(e,z,a),s(z,ft),n(e,Te,a),n(e,H,a),s(H,kt),n(e,Ee,a),n(e,F,a),s(F,yt),n(e,Pe,a),n(e,f,a),s(f,mt),s(f,se),s(se,vt),s(f,bt),s(f,Q),s(Q,_t),s(f,Tt),n(e,ge,a),n(e,W,a),W.innerHTML=Ta,n(e,He,a),n(e,x,a),s(x,Et),n(e,We,a),n(e,I,a),I.innerHTML=Ea,n(e,xe,a),n(e,d,a),s(d,Pt),s(d,oe),s(oe,gt),s(d,Ht),s(d,ie),s(ie,Wt),s(d,xt),s(d,le),s(le,It),s(d,Mt),n(e,Ie,a),n(e,Y,a),s(Y,Lt),n(e,Me,a),n(e,B,a),s(B,Rt),n(e,Le,a),n(e,M,a),M.innerHTML=Pa,n(e,Re,a),n(e,J,a),s(J,Ct),n(e,Ce,a),n(e,L,a),L.innerHTML=ga,n(e,Oe,a),n(e,K,a),s(K,Ot),n(e,je,a),n(e,R,a),R.innerHTML=Ha,n(e,Ge,a),n(e,V,a),s(V,jt),n(e,Ue,a),n(e,C,a),C.innerHTML=Wa,n(e,Se,a),n(e,v,a),s(v,Gt),s(v,pe),s(pe,Ut),s(v,St),n(e,Ae,a),n(e,X,a),s(X,At),n(e,qe,a),n(e,O,a),O.innerHTML=xa,n(e,De,a),n(e,Z,a),s(Z,qt),n(e,Ne,a),n(e,$,a),s($,Dt)},p:Nt,i:Nt,o:Nt,d(e){e&&t(k),e&&t(ue),e&&t(j),e&&t(re),e&&t(G),e&&t(ce),e&&t(T),e&&t(he),e&&t(U),e&&t(we),e&&t(S),e&&t(de),e&&t(w),e&&t(fe),e&&t(E),e&&t(ke),e&&t(q),e&&t(ye),e&&t(P),e&&t(me),e&&t(y),e&&t(ve),e&&t(D),e&&t(be),e&&t(m),e&&t(_e),e&&t(z),e&&t(Te),e&&t(H),e&&t(Ee),e&&t(F),e&&t(Pe),e&&t(f),e&&t(ge),e&&t(W),e&&t(He),e&&t(x),e&&t(We),e&&t(I),e&&t(xe),e&&t(d),e&&t(Ie),e&&t(Y),e&&t(Me),e&&t(B),e&&t(Le),e&&t(M),e&&t(Re),e&&t(J),e&&t(Ce),e&&t(L),e&&t(Oe),e&&t(K),e&&t(je),e&&t(R),e&&t(Ge),e&&t(V),e&&t(Ue),e&&t(C),e&&t(Se),e&&t(v),e&&t(Ae),e&&t(X),e&&t(qe),e&&t(O),e&&t(De),e&&t(Z),e&&t(Ne),e&&t($)}}}class Fa extends Sa{constructor(k){super(),Aa(this,k,null,Na,qa,{})}}export{Fa as default};
