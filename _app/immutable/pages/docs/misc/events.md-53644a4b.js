import{S as Nn,i as Un,s as zn,e as p,t as s,k as u,c as l,a as c,h as a,d as n,m as r,b as w,g as i,R as t,n as kn}from"../../../chunks/index-a8447449.js";function Jn(Fn){let b,Ee,$,d,ge,q,De,Te,xe,Oe,ee,D,Ce,ne,m,Pe,W,Ae,Ke,te,y,qe,Y,He,je,G,Re,Be,se,h,Fe,I,Me,Se,L,We,Ye,ae,T,Mn=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A key was pressed!"</span><span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">)</span></code>`,oe,f,Ge,V,Ie,Le,N,Ve,Ne,ie,x,Ue,pe,v,ze,U,Je,Qe,z,Xe,Ze,le,k,$e,J,en,nn,Q,tn,sn,ce,_,an,X,on,pn,ue,O,Sn=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Key pressed: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>char<span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown:Any>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">,</span> send_event<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code>`,re,C,ln,de,E,cn,un,rn,ye,P,Wn=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A key was pressed!"</span><span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown:Any>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">)</span>
widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown:Any>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">,</span> overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code>`,he,g,dn,Z,yn,hn,fe,A,fn,ve,H,vn,ke,K,Yn=`<code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ArbitaryPythonObject</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;&lt;VirtualEvent>>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">,</span> send_event<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>generate_event<span class="token punctuation">(</span><span class="token string">"&lt;&lt;VirtualEvent>>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>ArbitaryPythonObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`;return{c(){b=p("h1"),Ee=s("Events and bindings"),$=u(),d=p("p"),ge=s("As you have "),q=p("a"),De=s("learned before"),Te=s(", all GUI applications work based on events. Each keypress and mouseclick is an event to which the application responds."),xe=p("br"),Oe=s("For example, when a key is pressed, its character get inserted into the textbox, and when a mouseclick happens, the button gets a different state, and its callback is executed. Tukaan handles these basic and necessary events on its own, but you can use bindings to listen for and handle any event you like. This gives you a endless possibilities for communicating with the user or within the program."),ee=u(),D=p("h2"),Ce=s("Binding a function to an event"),ne=u(),m=p("p"),Pe=s("You can use the "),W=p("code"),Ae=s(".bind"),Ke=s(" method on any Tukaan widget to bind it to an event. A binding consists of an event sequence and the target function."),te=u(),y=p("p"),qe=s("The event sequence describes what event the widget should listen to. Every event is surrounded by "),Y=p("code"),He=s("<"),je=s(" and "),G=p("code"),Re=s(">"),Be=s(" signs, and after a semicolon you can give details about the event."),se=u(),h=p("p"),Fe=s("For example if you want to a keypress, you can use the "),I=p("code"),Me=s("<KeyDown>"),Se=s(" event. It\u2019s actually just a shorthand for "),L=p("code"),We=s("<KeyDown:Any>"),Ye=s(", so it binds to any keypress."),ae=u(),T=p("pre"),oe=u(),f=p("p"),Ge=s("Or if you want do listen to an "),V=p("code"),Ie=s("Control+Shift+a"),Le=s(", you would use the "),N=p("code"),Ve=s("<KeyDown:(Ctrl-Shift-a)>"),Ne=s(" sequence. You can add any number of modifier keys to a sequence, separating them with hypens."),ie=u(),x=p("h3"),Ue=s("Getting event info"),pe=u(),v=p("p"),ze=s("When you simply listen for the "),U=p("code"),Je=s("<KeyDown:(a)>"),Qe=s(" event, you know exactly which keys will trigger the callback, however when you use the "),z=p("code"),Xe=s("<KeyDown:Any>"),Ze=s(" sequence, how do you know which character triggered the event? Well, it\u2019s actually pretty simple."),le=u(),k=p("p"),$e=s("You can set the "),J=p("code"),en=s("send_event"),nn=s(" parameter on bind to "),Q=p("code"),tn=s("True"),sn=s(", so when an eventhappens, it will send a event object to the callback function."),ce=u(),_=p("p"),an=s("This event object has various properties depending on the event type. For a keyboard event you can access its character with the "),X=p("code"),on=s("char"),pn=s(" attribute."),ue=u(),O=p("pre"),re=u(),C=p("h3"),ln=s("Overwriting bindings"),de=u(),E=p("p"),cn=s("By default a binding won\u2019t overwrite any previous binding to that event. This means that you can run multiple functions on the same event. The associated callbacks will run in binding order."),un=p("br"),rn=s("However sometimes you want to overwrite any previous binding to that event, so only one function will run."),ye=u(),P=p("pre"),he=u(),g=p("p"),dn=s("Now "),Z=p("code"),yn=s("my_func"),hn=s(" will run only once at every keypress."),fe=u(),A=p("h2"),fn=s("Virtual events"),ve=u(),H=p("p"),vn=s("When building complex applications, virtual events come really handy to communicate within the program. Most Tukaan widgets also generate virtual events when something happens with them."),ke=u(),K=p("pre"),this.h()},l(e){b=l(e,"H1",{id:!0});var o=c(b);Ee=a(o,"Events and bindings"),o.forEach(n),$=r(e),d=l(e,"P",{});var j=c(d);ge=a(j,"As you have "),q=l(j,"A",{href:!0});var wn=c(q);De=a(wn,"learned before"),wn.forEach(n),Te=a(j,", all GUI applications work based on events. Each keypress and mouseclick is an event to which the application responds."),xe=l(j,"BR",{}),Oe=a(j,"For example, when a key is pressed, its character get inserted into the textbox, and when a mouseclick happens, the button gets a different state, and its callback is executed. Tukaan handles these basic and necessary events on its own, but you can use bindings to listen for and handle any event you like. This gives you a endless possibilities for communicating with the user or within the program."),j.forEach(n),ee=r(e),D=l(e,"H2",{id:!0});var bn=c(D);Ce=a(bn,"Binding a function to an event"),bn.forEach(n),ne=r(e),m=l(e,"P",{});var we=c(m);Pe=a(we,"You can use the "),W=l(we,"CODE",{});var mn=c(W);Ae=a(mn,".bind"),mn.forEach(n),Ke=a(we," method on any Tukaan widget to bind it to an event. A binding consists of an event sequence and the target function."),we.forEach(n),te=r(e),y=l(e,"P",{});var R=c(y);qe=a(R,"The event sequence describes what event the widget should listen to. Every event is surrounded by "),Y=l(R,"CODE",{});var _n=c(Y);He=a(_n,"<"),_n.forEach(n),je=a(R," and "),G=l(R,"CODE",{});var En=c(G);Re=a(En,">"),En.forEach(n),Be=a(R," signs, and after a semicolon you can give details about the event."),R.forEach(n),se=r(e),h=l(e,"P",{});var B=c(h);Fe=a(B,"For example if you want to a keypress, you can use the "),I=l(B,"CODE",{});var gn=c(I);Me=a(gn,"<KeyDown>"),gn.forEach(n),Se=a(B," event. It\u2019s actually just a shorthand for "),L=l(B,"CODE",{});var Dn=c(L);We=a(Dn,"<KeyDown:Any>"),Dn.forEach(n),Ye=a(B,", so it binds to any keypress."),B.forEach(n),ae=r(e),T=l(e,"PRE",{class:!0});var Gn=c(T);Gn.forEach(n),oe=r(e),f=l(e,"P",{});var F=c(f);Ge=a(F,"Or if you want do listen to an "),V=l(F,"CODE",{});var Tn=c(V);Ie=a(Tn,"Control+Shift+a"),Tn.forEach(n),Le=a(F,", you would use the "),N=l(F,"CODE",{});var xn=c(N);Ve=a(xn,"<KeyDown:(Ctrl-Shift-a)>"),xn.forEach(n),Ne=a(F," sequence. You can add any number of modifier keys to a sequence, separating them with hypens."),F.forEach(n),ie=r(e),x=l(e,"H3",{id:!0});var On=c(x);Ue=a(On,"Getting event info"),On.forEach(n),pe=r(e),v=l(e,"P",{});var M=c(v);ze=a(M,"When you simply listen for the "),U=l(M,"CODE",{});var Cn=c(U);Je=a(Cn,"<KeyDown:(a)>"),Cn.forEach(n),Qe=a(M," event, you know exactly which keys will trigger the callback, however when you use the "),z=l(M,"CODE",{});var Pn=c(z);Xe=a(Pn,"<KeyDown:Any>"),Pn.forEach(n),Ze=a(M," sequence, how do you know which character triggered the event? Well, it\u2019s actually pretty simple."),M.forEach(n),le=r(e),k=l(e,"P",{});var S=c(k);$e=a(S,"You can set the "),J=l(S,"CODE",{});var An=c(J);en=a(An,"send_event"),An.forEach(n),nn=a(S," parameter on bind to "),Q=l(S,"CODE",{});var Kn=c(Q);tn=a(Kn,"True"),Kn.forEach(n),sn=a(S,", so when an eventhappens, it will send a event object to the callback function."),S.forEach(n),ce=r(e),_=l(e,"P",{});var be=c(_);an=a(be,"This event object has various properties depending on the event type. For a keyboard event you can access its character with the "),X=l(be,"CODE",{});var qn=c(X);on=a(qn,"char"),qn.forEach(n),pn=a(be," attribute."),be.forEach(n),ue=r(e),O=l(e,"PRE",{class:!0});var In=c(O);In.forEach(n),re=r(e),C=l(e,"H3",{id:!0});var Hn=c(C);ln=a(Hn,"Overwriting bindings"),Hn.forEach(n),de=r(e),E=l(e,"P",{});var me=c(E);cn=a(me,"By default a binding won\u2019t overwrite any previous binding to that event. This means that you can run multiple functions on the same event. The associated callbacks will run in binding order."),un=l(me,"BR",{}),rn=a(me,"However sometimes you want to overwrite any previous binding to that event, so only one function will run."),me.forEach(n),ye=r(e),P=l(e,"PRE",{class:!0});var Ln=c(P);Ln.forEach(n),he=r(e),g=l(e,"P",{});var _e=c(g);dn=a(_e,"Now "),Z=l(_e,"CODE",{});var jn=c(Z);yn=a(jn,"my_func"),jn.forEach(n),hn=a(_e," will run only once at every keypress."),_e.forEach(n),fe=r(e),A=l(e,"H2",{id:!0});var Rn=c(A);fn=a(Rn,"Virtual events"),Rn.forEach(n),ve=r(e),H=l(e,"P",{});var Bn=c(H);vn=a(Bn,"When building complex applications, virtual events come really handy to communicate within the program. Most Tukaan widgets also generate virtual events when something happens with them."),Bn.forEach(n),ke=r(e),K=l(e,"PRE",{class:!0});var Vn=c(K);Vn.forEach(n),this.h()},h(){w(b,"id","events-and-bindings"),w(q,"href","/docs/basics/get-started#the-event-loop"),w(D,"id","binding-a-function-to-an-event"),w(T,"class","language-python"),w(x,"id","getting-event-info"),w(O,"class","language-python"),w(C,"id","overwriting-bindings"),w(P,"class","language-python"),w(A,"id","virtual-events"),w(K,"class","language-python")},m(e,o){i(e,b,o),t(b,Ee),i(e,$,o),i(e,d,o),t(d,ge),t(d,q),t(q,De),t(d,Te),t(d,xe),t(d,Oe),i(e,ee,o),i(e,D,o),t(D,Ce),i(e,ne,o),i(e,m,o),t(m,Pe),t(m,W),t(W,Ae),t(m,Ke),i(e,te,o),i(e,y,o),t(y,qe),t(y,Y),t(Y,He),t(y,je),t(y,G),t(G,Re),t(y,Be),i(e,se,o),i(e,h,o),t(h,Fe),t(h,I),t(I,Me),t(h,Se),t(h,L),t(L,We),t(h,Ye),i(e,ae,o),i(e,T,o),T.innerHTML=Mn,i(e,oe,o),i(e,f,o),t(f,Ge),t(f,V),t(V,Ie),t(f,Le),t(f,N),t(N,Ve),t(f,Ne),i(e,ie,o),i(e,x,o),t(x,Ue),i(e,pe,o),i(e,v,o),t(v,ze),t(v,U),t(U,Je),t(v,Qe),t(v,z),t(z,Xe),t(v,Ze),i(e,le,o),i(e,k,o),t(k,$e),t(k,J),t(J,en),t(k,nn),t(k,Q),t(Q,tn),t(k,sn),i(e,ce,o),i(e,_,o),t(_,an),t(_,X),t(X,on),t(_,pn),i(e,ue,o),i(e,O,o),O.innerHTML=Sn,i(e,re,o),i(e,C,o),t(C,ln),i(e,de,o),i(e,E,o),t(E,cn),t(E,un),t(E,rn),i(e,ye,o),i(e,P,o),P.innerHTML=Wn,i(e,he,o),i(e,g,o),t(g,dn),t(g,Z),t(Z,yn),t(g,hn),i(e,fe,o),i(e,A,o),t(A,fn),i(e,ve,o),i(e,H,o),t(H,vn),i(e,ke,o),i(e,K,o),K.innerHTML=Yn},p:kn,i:kn,o:kn,d(e){e&&n(b),e&&n($),e&&n(d),e&&n(ee),e&&n(D),e&&n(ne),e&&n(m),e&&n(te),e&&n(y),e&&n(se),e&&n(h),e&&n(ae),e&&n(T),e&&n(oe),e&&n(f),e&&n(ie),e&&n(x),e&&n(pe),e&&n(v),e&&n(le),e&&n(k),e&&n(ce),e&&n(_),e&&n(ue),e&&n(O),e&&n(re),e&&n(C),e&&n(de),e&&n(E),e&&n(ye),e&&n(P),e&&n(he),e&&n(g),e&&n(fe),e&&n(A),e&&n(ve),e&&n(H),e&&n(ke),e&&n(K)}}}class Xn extends Nn{constructor(b){super(),Un(this,b,null,Jn,zn,{})}}export{Xn as default};
