import{S as Qn,i as Xn,s as Zn,e as l,t as s,k as u,c as p,a as c,h as a,d as n,m as r,b as w,g as i,R as t,n as mn}from"../../../chunks/index-a8447449.js";function $n(Yn){let b,ge,ee,h,De,H,Te,Ce,Oe,xe,ne,T,Pe,te,m,Ae,W,Ke,qe,se,f,He,Y,je,Se,G,Re,Be,ae,y,Fe,I,Me,We,L,Ye,Ge,oe,C,Gn=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A key was pressed!"</span><span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">)</span></code>`,ie,d,Ie,V,Le,Ve,N,Ne,Ue,U,ze,Je,le,O,Qe,pe,v,Xe,z,Ze,$e,J,en,nn,ce,k,tn,Q,sn,an,X,on,ln,ue,_,pn,Z,cn,un,re,x,In=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Key pressed: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>char<span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown:Any>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">,</span> send_event<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code>`,de,P,rn,he,E,dn,hn,fn,fe,A,Ln=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A key was pressed!"</span><span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown:Any>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">)</span>
widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;KeyDown:Any>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">,</span> overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code>`,ye,g,yn,$,vn,kn,ve,K,wn,ke,j,bn,we,q,Vn=`<code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ArbitaryPythonObject</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;&lt;VirtualEvent>>"</span><span class="token punctuation">,</span> my_func<span class="token punctuation">,</span> send_event<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

widget<span class="token punctuation">.</span>generate_event<span class="token punctuation">(</span><span class="token string">"&lt;&lt;VirtualEvent>>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>ArbitaryPythonObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`;return{c(){b=l("h1"),ge=s("Events and bindings"),ee=u(),h=l("p"),De=s("As you have "),H=l("a"),Te=s("learned before"),Ce=s(", all GUI applications work based on events. Each keypress and mouseclick is an event to which the application responds."),Oe=l("br"),xe=s("For example, when a key is pressed, its character get inserted into the textbox, and when a mouseclick happens, the button gets a different state, and its callback is executed. Tukaan handles these basic and necessary events on its own, but you can use bindings to listen for and handle any event you like. This gives you a endless possibilities for communicating with the user or within the program."),ne=u(),T=l("h2"),Pe=s("Binding a function to an event"),te=u(),m=l("p"),Ae=s("You can use the "),W=l("code"),Ke=s(".bind"),qe=s(" method on any Tukaan widget to bind it to an event. A binding consists of an event sequence and the target function."),se=u(),f=l("p"),He=s("The event sequence describes what event the widget should listen to. Every event is surrounded by "),Y=l("code"),je=s("<"),Se=s(" and "),G=l("code"),Re=s(">"),Be=s(" signs, and after a semicolon you can give details about the event."),ae=u(),y=l("p"),Fe=s("For example if you want to a keypress, you can use the "),I=l("code"),Me=s("<KeyDown>"),We=s(" event. It\u2019s actually just a shorthand for "),L=l("code"),Ye=s("<KeyDown:Any>"),Ge=s(", so it binds to any keypress."),oe=u(),C=l("pre"),ie=u(),d=l("p"),Ie=s("Or if you want to listen to a the sequence "),V=l("code"),Le=s("Control+Shift+a"),Ve=s(", you would use the following: "),N=l("code"),Ne=s("<KeyDown:(Ctrl-Shift-a)>"),Ue=s(". This signifies that you are listening for a keypress and that it must have the order "),U=l("code"),ze=s("Control+Shift+a"),Je=s(". You can add any number of modifier keys to a sequence, separating them with hypens."),le=u(),O=l("h3"),Qe=s("Getting event info"),pe=u(),v=l("p"),Xe=s("When you simply listen for the "),z=l("code"),Ze=s("<KeyDown:(a)>"),$e=s(" event, you know exactly which keys will trigger the callback, however when you use the "),J=l("code"),en=s("<KeyDown:Any>"),nn=s(" sequence, how do you know which character triggered the event? Well, it\u2019s actually quite simple."),ce=u(),k=l("p"),tn=s("You can set the "),Q=l("code"),sn=s("send_event"),an=s(" parameter on bind to "),X=l("code"),on=s("True"),ln=s(", so when an eventhappens, it will send a event object to the callback function."),ue=u(),_=l("p"),pn=s("This event object has various properties depending on the event type. For a keyboard event you can access its character with the "),Z=l("code"),cn=s("char"),un=s(" attribute."),re=u(),x=l("pre"),de=u(),P=l("h3"),rn=s("Overwriting bindings"),he=u(),E=l("p"),dn=s("By default a binding won\u2019t overwrite any previous binding to that event. This means that you can run multiple functions on the same event. The associated callbacks will run in binding order."),hn=l("br"),fn=s("However sometimes you want to overwrite any previous binding to that event, so only one function will run."),fe=u(),A=l("pre"),ye=u(),g=l("p"),yn=s("Now "),$=l("code"),vn=s("my_func"),kn=s(" will run only once at every keypress."),ve=u(),K=l("h2"),wn=s("Virtual events"),ke=u(),j=l("p"),bn=s("When building complex applications, virtual events come really handy to communicate within the program. Most Tukaan widgets also generate virtual events when something happens with them."),we=u(),q=l("pre"),this.h()},l(e){b=p(e,"H1",{id:!0});var o=c(b);ge=a(o,"Events and bindings"),o.forEach(n),ee=r(e),h=p(e,"P",{});var S=c(h);De=a(S,"As you have "),H=p(S,"A",{href:!0});var _n=c(H);Te=a(_n,"learned before"),_n.forEach(n),Ce=a(S,", all GUI applications work based on events. Each keypress and mouseclick is an event to which the application responds."),Oe=p(S,"BR",{}),xe=a(S,"For example, when a key is pressed, its character get inserted into the textbox, and when a mouseclick happens, the button gets a different state, and its callback is executed. Tukaan handles these basic and necessary events on its own, but you can use bindings to listen for and handle any event you like. This gives you a endless possibilities for communicating with the user or within the program."),S.forEach(n),ne=r(e),T=p(e,"H2",{id:!0});var En=c(T);Pe=a(En,"Binding a function to an event"),En.forEach(n),te=r(e),m=p(e,"P",{});var be=c(m);Ae=a(be,"You can use the "),W=p(be,"CODE",{});var gn=c(W);Ke=a(gn,".bind"),gn.forEach(n),qe=a(be," method on any Tukaan widget to bind it to an event. A binding consists of an event sequence and the target function."),be.forEach(n),se=r(e),f=p(e,"P",{});var R=c(f);He=a(R,"The event sequence describes what event the widget should listen to. Every event is surrounded by "),Y=p(R,"CODE",{});var Dn=c(Y);je=a(Dn,"<"),Dn.forEach(n),Se=a(R," and "),G=p(R,"CODE",{});var Tn=c(G);Re=a(Tn,">"),Tn.forEach(n),Be=a(R," signs, and after a semicolon you can give details about the event."),R.forEach(n),ae=r(e),y=p(e,"P",{});var B=c(y);Fe=a(B,"For example if you want to a keypress, you can use the "),I=p(B,"CODE",{});var Cn=c(I);Me=a(Cn,"<KeyDown>"),Cn.forEach(n),We=a(B," event. It\u2019s actually just a shorthand for "),L=p(B,"CODE",{});var On=c(L);Ye=a(On,"<KeyDown:Any>"),On.forEach(n),Ge=a(B,", so it binds to any keypress."),B.forEach(n),oe=r(e),C=p(e,"PRE",{class:!0});var Nn=c(C);Nn.forEach(n),ie=r(e),d=p(e,"P",{});var D=c(d);Ie=a(D,"Or if you want to listen to a the sequence "),V=p(D,"CODE",{});var xn=c(V);Le=a(xn,"Control+Shift+a"),xn.forEach(n),Ve=a(D,", you would use the following: "),N=p(D,"CODE",{});var Pn=c(N);Ne=a(Pn,"<KeyDown:(Ctrl-Shift-a)>"),Pn.forEach(n),Ue=a(D,". This signifies that you are listening for a keypress and that it must have the order "),U=p(D,"CODE",{});var An=c(U);ze=a(An,"Control+Shift+a"),An.forEach(n),Je=a(D,". You can add any number of modifier keys to a sequence, separating them with hypens."),D.forEach(n),le=r(e),O=p(e,"H3",{id:!0});var Kn=c(O);Qe=a(Kn,"Getting event info"),Kn.forEach(n),pe=r(e),v=p(e,"P",{});var F=c(v);Xe=a(F,"When you simply listen for the "),z=p(F,"CODE",{});var qn=c(z);Ze=a(qn,"<KeyDown:(a)>"),qn.forEach(n),$e=a(F," event, you know exactly which keys will trigger the callback, however when you use the "),J=p(F,"CODE",{});var Hn=c(J);en=a(Hn,"<KeyDown:Any>"),Hn.forEach(n),nn=a(F," sequence, how do you know which character triggered the event? Well, it\u2019s actually quite simple."),F.forEach(n),ce=r(e),k=p(e,"P",{});var M=c(k);tn=a(M,"You can set the "),Q=p(M,"CODE",{});var jn=c(Q);sn=a(jn,"send_event"),jn.forEach(n),an=a(M," parameter on bind to "),X=p(M,"CODE",{});var Sn=c(X);on=a(Sn,"True"),Sn.forEach(n),ln=a(M,", so when an eventhappens, it will send a event object to the callback function."),M.forEach(n),ue=r(e),_=p(e,"P",{});var me=c(_);pn=a(me,"This event object has various properties depending on the event type. For a keyboard event you can access its character with the "),Z=p(me,"CODE",{});var Rn=c(Z);cn=a(Rn,"char"),Rn.forEach(n),un=a(me," attribute."),me.forEach(n),re=r(e),x=p(e,"PRE",{class:!0});var Un=c(x);Un.forEach(n),de=r(e),P=p(e,"H3",{id:!0});var Bn=c(P);rn=a(Bn,"Overwriting bindings"),Bn.forEach(n),he=r(e),E=p(e,"P",{});var _e=c(E);dn=a(_e,"By default a binding won\u2019t overwrite any previous binding to that event. This means that you can run multiple functions on the same event. The associated callbacks will run in binding order."),hn=p(_e,"BR",{}),fn=a(_e,"However sometimes you want to overwrite any previous binding to that event, so only one function will run."),_e.forEach(n),fe=r(e),A=p(e,"PRE",{class:!0});var zn=c(A);zn.forEach(n),ye=r(e),g=p(e,"P",{});var Ee=c(g);yn=a(Ee,"Now "),$=p(Ee,"CODE",{});var Fn=c($);vn=a(Fn,"my_func"),Fn.forEach(n),kn=a(Ee," will run only once at every keypress."),Ee.forEach(n),ve=r(e),K=p(e,"H2",{id:!0});var Mn=c(K);wn=a(Mn,"Virtual events"),Mn.forEach(n),ke=r(e),j=p(e,"P",{});var Wn=c(j);bn=a(Wn,"When building complex applications, virtual events come really handy to communicate within the program. Most Tukaan widgets also generate virtual events when something happens with them."),Wn.forEach(n),we=r(e),q=p(e,"PRE",{class:!0});var Jn=c(q);Jn.forEach(n),this.h()},h(){w(b,"id","events-and-bindings"),w(H,"href","/docs/basics/get-started#the-event-loop"),w(T,"id","binding-a-function-to-an-event"),w(C,"class","language-python"),w(O,"id","getting-event-info"),w(x,"class","language-python"),w(P,"id","overwriting-bindings"),w(A,"class","language-python"),w(K,"id","virtual-events"),w(q,"class","language-python")},m(e,o){i(e,b,o),t(b,ge),i(e,ee,o),i(e,h,o),t(h,De),t(h,H),t(H,Te),t(h,Ce),t(h,Oe),t(h,xe),i(e,ne,o),i(e,T,o),t(T,Pe),i(e,te,o),i(e,m,o),t(m,Ae),t(m,W),t(W,Ke),t(m,qe),i(e,se,o),i(e,f,o),t(f,He),t(f,Y),t(Y,je),t(f,Se),t(f,G),t(G,Re),t(f,Be),i(e,ae,o),i(e,y,o),t(y,Fe),t(y,I),t(I,Me),t(y,We),t(y,L),t(L,Ye),t(y,Ge),i(e,oe,o),i(e,C,o),C.innerHTML=Gn,i(e,ie,o),i(e,d,o),t(d,Ie),t(d,V),t(V,Le),t(d,Ve),t(d,N),t(N,Ne),t(d,Ue),t(d,U),t(U,ze),t(d,Je),i(e,le,o),i(e,O,o),t(O,Qe),i(e,pe,o),i(e,v,o),t(v,Xe),t(v,z),t(z,Ze),t(v,$e),t(v,J),t(J,en),t(v,nn),i(e,ce,o),i(e,k,o),t(k,tn),t(k,Q),t(Q,sn),t(k,an),t(k,X),t(X,on),t(k,ln),i(e,ue,o),i(e,_,o),t(_,pn),t(_,Z),t(Z,cn),t(_,un),i(e,re,o),i(e,x,o),x.innerHTML=In,i(e,de,o),i(e,P,o),t(P,rn),i(e,he,o),i(e,E,o),t(E,dn),t(E,hn),t(E,fn),i(e,fe,o),i(e,A,o),A.innerHTML=Ln,i(e,ye,o),i(e,g,o),t(g,yn),t(g,$),t($,vn),t(g,kn),i(e,ve,o),i(e,K,o),t(K,wn),i(e,ke,o),i(e,j,o),t(j,bn),i(e,we,o),i(e,q,o),q.innerHTML=Vn},p:mn,i:mn,o:mn,d(e){e&&n(b),e&&n(ee),e&&n(h),e&&n(ne),e&&n(T),e&&n(te),e&&n(m),e&&n(se),e&&n(f),e&&n(ae),e&&n(y),e&&n(oe),e&&n(C),e&&n(ie),e&&n(d),e&&n(le),e&&n(O),e&&n(pe),e&&n(v),e&&n(ce),e&&n(k),e&&n(ue),e&&n(_),e&&n(re),e&&n(x),e&&n(de),e&&n(P),e&&n(he),e&&n(E),e&&n(fe),e&&n(A),e&&n(ye),e&&n(g),e&&n(ve),e&&n(K),e&&n(ke),e&&n(j),e&&n(we),e&&n(q)}}}class nt extends Qn{constructor(b){super(),Xn(this,b,null,$n,Zn,{})}}export{nt as default};
