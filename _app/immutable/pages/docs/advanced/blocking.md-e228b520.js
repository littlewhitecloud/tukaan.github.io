import{S as dt,i as kt,s as mt,e as p,t as o,k,c as l,a as c,h as i,d as n,m,b as H,g as s,R as a,n as tt}from"../../../chunks/index-a8447449.js";function vt(rt){let u,D,P,h,j,E,L,N,x,y,T,R,B,v,S,A,_,V,G,f,K,C,r,M,g,Q,z,I,J,X,O,d,Y,U,Z,$,q,w,ut=`<code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">import</span> tukaan

app <span class="token operator">=</span> tukaan<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">this_is_a_blocking_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># Block the thread</span>
    this_is_a_data <span class="token operator">=</span> <span class="token string">"Hi! I'm from another thread!"</span>
    app<span class="token punctuation">.</span>generate_event<span class="token punctuation">(</span><span class="token string">"&lt;&lt;VirtualEventFromAnotherThread>>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>this_is_a_data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">event_receiver</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Event received with data: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;&lt;VirtualEventFromAnotherThread>>"</span><span class="token punctuation">,</span> event_receiver<span class="token punctuation">,</span> send_event<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>this_is_a_blocking_func<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`;return{c(){u=p("h1"),D=o("Blocking the event loop"),P=k(),h=p("p"),j=o("If you do long-running operations in your GUI program, like "),E=p("code"),L=o("time.sleep(10)"),N=o(", it will block the event loop from running, thus prevent it from processing events and redrawing the GUI, so neither the user nor the operating system (windowmanager) can interact/communicate with the window. For example Windows marks the window as \u201CNot responding\u201D after 5 seconds."),x=k(),y=p("blockquote"),T=p("p"),R=o(`In a GUI application you shouldn\u2019t do things that take longer than 0.1 seconds.\\
But in case you need to do it, let\u2019s look at what options we have.`),B=k(),v=p("h2"),S=o("Threading"),A=k(),_=p("p"),V=o("Unfortunately, Tukaan isn\u2019t thread-safe because it would make it significantly slower. This means that you can\u2019t call most of Tukaan\u2019s functions outside the main thread (e.g. you can generate a event in another thread, but you can\u2019t create an image). However there are some ways to communicate between the threads, let\u2019s look at them!"),G=k(),f=p("h3"),K=o("Using virtual events"),C=k(),r=p("p"),M=o("A really nice way to communicate between threads in Tukaan is to use custom "),g=p("a"),Q=o("virtual events"),z=o(`).
With the `),I=p("code"),J=o("event_generate"),X=o(" method you can post a virtual event to the event loop, which will handle it, and you can even send arbitary Python objects as data with it."),O=k(),d=p("p"),Y=o("Here you can see that that the program starts a second thread, and the "),U=p("code"),Z=o("time.sleep(4)"),$=o(" will block it for 4 seconds. Then it sends a virtual event to the event loop. This event has a function bound to it that will run in the main thread."),q=k(),w=p("pre"),this.h()},l(t){u=l(t,"H1",{id:!0});var e=c(u);D=i(e,"Blocking the event loop"),e.forEach(n),P=m(t),h=l(t,"P",{});var F=c(h);j=i(F,"If you do long-running operations in your GUI program, like "),E=l(F,"CODE",{});var nt=c(E);L=i(nt,"time.sleep(10)"),nt.forEach(n),N=i(F,", it will block the event loop from running, thus prevent it from processing events and redrawing the GUI, so neither the user nor the operating system (windowmanager) can interact/communicate with the window. For example Windows marks the window as \u201CNot responding\u201D after 5 seconds."),F.forEach(n),x=m(t),y=l(t,"BLOCKQUOTE",{});var at=c(y);T=l(at,"P",{});var et=c(T);R=i(et,`In a GUI application you shouldn\u2019t do things that take longer than 0.1 seconds.\\
But in case you need to do it, let\u2019s look at what options we have.`),et.forEach(n),at.forEach(n),B=m(t),v=l(t,"H2",{id:!0});var st=c(v);S=i(st,"Threading"),st.forEach(n),A=m(t),_=l(t,"P",{});var ot=c(_);V=i(ot,"Unfortunately, Tukaan isn\u2019t thread-safe because it would make it significantly slower. This means that you can\u2019t call most of Tukaan\u2019s functions outside the main thread (e.g. you can generate a event in another thread, but you can\u2019t create an image). However there are some ways to communicate between the threads, let\u2019s look at them!"),ot.forEach(n),G=m(t),f=l(t,"H3",{id:!0});var it=c(f);K=i(it,"Using virtual events"),it.forEach(n),C=m(t),r=l(t,"P",{});var b=c(r);M=i(b,"A really nice way to communicate between threads in Tukaan is to use custom "),g=l(b,"A",{href:!0});var pt=c(g);Q=i(pt,"virtual events"),pt.forEach(n),z=i(b,`).
With the `),I=l(b,"CODE",{});var lt=c(I);J=i(lt,"event_generate"),lt.forEach(n),X=i(b," method you can post a virtual event to the event loop, which will handle it, and you can even send arbitary Python objects as data with it."),b.forEach(n),O=m(t),d=l(t,"P",{});var W=c(d);Y=i(W,"Here you can see that that the program starts a second thread, and the "),U=l(W,"CODE",{});var ct=c(U);Z=i(ct,"time.sleep(4)"),ct.forEach(n),$=i(W," will block it for 4 seconds. Then it sends a virtual event to the event loop. This event has a function bound to it that will run in the main thread."),W.forEach(n),q=m(t),w=l(t,"PRE",{class:!0});var ht=c(w);ht.forEach(n),this.h()},h(){H(u,"id","blocking-the-event-loop"),H(v,"id","threading"),H(f,"id","using-virtual-events"),H(g,"href","/docs/misc/events#virtual-events"),H(w,"class","language-python")},m(t,e){s(t,u,e),a(u,D),s(t,P,e),s(t,h,e),a(h,j),a(h,E),a(E,L),a(h,N),s(t,x,e),s(t,y,e),a(y,T),a(T,R),s(t,B,e),s(t,v,e),a(v,S),s(t,A,e),s(t,_,e),a(_,V),s(t,G,e),s(t,f,e),a(f,K),s(t,C,e),s(t,r,e),a(r,M),a(r,g),a(g,Q),a(r,z),a(r,I),a(I,J),a(r,X),s(t,O,e),s(t,d,e),a(d,Y),a(d,U),a(U,Z),a(d,$),s(t,q,e),s(t,w,e),w.innerHTML=ut},p:tt,i:tt,o:tt,d(t){t&&n(u),t&&n(P),t&&n(h),t&&n(x),t&&n(y),t&&n(B),t&&n(v),t&&n(A),t&&n(_),t&&n(G),t&&n(f),t&&n(C),t&&n(r),t&&n(O),t&&n(d),t&&n(q),t&&n(w)}}}class wt extends dt{constructor(u){super(),kt(this,u,null,vt,mt,{})}}export{wt as default};
